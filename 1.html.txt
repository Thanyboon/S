
<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ระบบสั่งสินค้าอาหารแช่แข็ง</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8;
            color: #333;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            padding: 20px;
            box-sizing: border-box;
        }
        .container {
            background-color: #ffffff;
            border-radius: 15px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 500px;
            overflow: hidden;
            display: flex;
            flex-direction: column;
            min-height: 600px;
        }
        .header {
            background-color: #4CAF50; /* Green for frozen food theme */
            color: white;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-top-left-radius: 15px;
            border-top-right-radius: 15px;
        }
        .hamburger-menu {
            cursor: pointer;
            font-size: 24px;
            padding: 5px;
            border-radius: 5px;
            transition: background-color 0.2s;
        }
        .hamburger-menu:hover {
            background-color: rgba(255, 255, 255, 0.2);
        }
        .main-content {
            flex-grow: 1;
            padding: 20px;
            overflow-y: auto;
        }
        .btn-primary {
            background-color: #4CAF50;
            color: white;
            padding: 12px 25px;
            border-radius: 8px;
            font-weight: 600;
            transition: background-color 0.3s ease;
            box-shadow: 0 4px 10px rgba(76, 175, 80, 0.3);
        }
        .btn-primary:hover {
            background-color: #45a049;
        }
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }
        .modal.open {
            opacity: 1;
            visibility: visible;
        }
        .modal-content {
            background-color: #ffffff;
            padding: 30px;
            border-radius: 15px;
            width: 90%;
            max-width: 450px;
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
            position: relative;
            max-height: 90vh;
            overflow-y: auto;
            transform: translateY(20px);
            opacity: 0;
            transition: transform 0.3s ease, opacity 0.3s ease;
        }
        .modal.open .modal-content {
            transform: translateY(0);
            opacity: 1;
        }
        .modal-close {
            position: absolute;
            top: 15px;
            right: 15px;
            font-size: 28px;
            cursor: pointer;
            color: #888;
            transition: color 0.2s;
        }
        .modal-close:hover {
            color: #333;
        }
        .menu-list li, .category-list li {
            padding: 12px 15px;
            border-bottom: 1px solid #eee;
            cursor: pointer;
            transition: background-color 0.2s;
            border-radius: 8px;
        }
        .menu-list li:last-child, .category-list li:last-child {
            border-bottom: none;
        }
        .menu-list li:hover, .category-list li:hover {
            background-color: #f5f5f5;
        }
        .product-card {
            background-color: #f9f9f9;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 15px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            display: flex;
            flex-direction: column;
        }
        .product-card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        .quantity-control {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        .quantity-btn {
            background-color: #e0e0e0;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 18px;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .quantity-btn:hover {
            background-color: #d0d0d0;
        }
        .quantity-input {
            width: 40px;
            text-align: center;
            border: 1px solid #ccc;
            border-radius: 5px;
            padding: 5px 0;
            -moz-appearance: textfield; /* Firefox */
        }
        .quantity-input::-webkit-outer-spin-button,
        .quantity-input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        .add-to-cart-btn {
            background-color: #2196F3; /* Blue for add to cart */
            color: white;
            padding: 8px 15px;
            border-radius: 8px;
            font-weight: 500;
            transition: background-color 0.3s ease;
        }
        .add-to-cart-btn:hover {
            background-color: #1976D2;
        }
        .cart-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 0;
            border-bottom: 1px dashed #eee;
        }
        .cart-item:last-child {
            border-bottom: none;
        }
        .payment-qr-code {
            max-width: 200px;
            height: auto;
            margin: 20px auto;
            display: block;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        .message-box {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #fff;
            padding: 25px 30px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            z-index: 1001;
            display: none; /* Hidden by default */
            text-align: center;
        }
        .message-box button {
            margin-top: 15px;
            padding: 8px 15px;
            background-color: #4CAF50;
            color: white;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .message-box button:hover {
            background-color: #45a049;
        }
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1002;
            display: none;
        }
        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            border-left-color: #4CAF50;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen p-4">

    <div class="container">
        <div class="header">
            <div class="hamburger-menu" id="hamburgerMenu">☰</div>
            <h1 class="text-xl font-semibold">ร้านอาหารแช่แข็ง</h1>
            <button id="viewOrderBtn" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg text-sm transition-colors duration-300">
                ดูคำสั่งซื้อ (<span id="cartItemCount">0</span>)
            </button>
        </div>

        <div class="main-content flex flex-col items-center justify-center text-center" id="mainContent">
            <h2 class="text-2xl font-bold mb-6 text-gray-700">ยินดีต้อนรับสู่ร้านอาหารแช่แข็ง</h2>
            <p class="text-gray-600 mb-8">สแกน QR โค้ดเพื่อเริ่มสั่งสินค้า</p>
            <button id="scanQrBtn" class="btn-primary">สแกน QR โค้ด (จำลอง)</button>
        </div>
    </div>

    <!-- Menu Modal -->
    <div id="menuModal" class="modal">
        <div class="modal-content">
            <span class="modal-close" id="closeMenuModal">&times;</span>
            <h3 class="text-2xl font-bold mb-6 text-gray-800">หมวดหมู่เมนู</h3>
            <ul id="categoryList" class="list-none p-0 m-0">
                <!-- Categories will be loaded here by JS -->
            </ul>
        </div>
    </div>

    <!-- Product List Modal -->
    <div id="productListModal" class="modal">
        <div class="modal-content">
            <span class="modal-close" id="closeProductListModal">&times;</span>
            <h3 class="text-2xl font-bold mb-6 text-gray-800" id="productListTitle"></h3>
            <div id="productsContainer" class="space-y-4">
                <!-- Products will be loaded here by JS -->
            </div>
            <button id="backToCategoriesBtn" class="btn-primary w-full mt-6">กลับไปหมวดหมู่</button>
        </div>
    </div>

    <!-- Order Summary Modal -->
    <div id="orderSummaryModal" class="modal">
        <div class="modal-content">
            <span class="modal-close" id="closeOrderSummaryModal">&times;</span>
            <h3 class="text-2xl font-bold mb-6 text-gray-800">คำสั่งซื้อของฉัน</h3>
            <div id="cartItemsDisplay" class="mb-4 max-h-60 overflow-y-auto pr-2">
                <!-- Cart items will be displayed here -->
            </div>
            <div class="flex justify-between items-center text-xl font-bold mb-6 border-t pt-4">
                <span>ยอดรวมทั้งหมด:</span>
                <span><span id="totalPrice">0.00</span> บาท</span>
            </div>

            <form id="orderForm" class="space-y-4">
                <div>
                    <label for="customerName" class="block text-gray-700 text-sm font-bold mb-2">ชื่อผู้รับ:</label>
                    <input type="text" id="customerName" class="shadow appearance-none border rounded-lg w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" required>
                </div>
                <div>
                    <label for="customerPhone" class="block text-gray-700 text-sm font-bold mb-2">เบอร์โทรศัพท์:</label>
                    <input type="tel" id="customerPhone" class="shadow appearance-none border rounded-lg w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" required>
                </div>
                <div>
                    <label for="customerAddress" class="block text-gray-700 text-sm font-bold mb-2">ที่อยู่:</label>
                    <textarea id="customerAddress" rows="3" class="shadow appearance-none border rounded-lg w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" required></textarea>
                </div>

                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2">วิธีการชำระเงิน:</label>
                    <div class="flex items-center mb-2">
                        <input type="radio" id="paymentTransfer" name="paymentMethod" value="transfer" class="mr-2" checked>
                        <label for="paymentTransfer">โอนเงิน</label>
                    </div>
                    <div class="flex items-center">
                        <input type="radio" id="paymentCash" name="paymentMethod" value="cash" class="mr-2">
                        <label for="paymentCash">เงินสด (ชำระปลายทาง)</label>
                    </div>
                </div>

                <div id="transferDetails" class="space-y-4">
                    <p class="text-center text-gray-700">สแกน QR โค้ดเพื่อโอนเงิน:</p>
                    <img src="https://placehold.co/200x200/4CAF50/ffffff?text=QR+Code" alt="Payment QR Code" class="payment-qr-code">
                    <p class="text-center text-gray-600 text-sm">ตัวอย่าง QR โค้ดสำหรับชำระเงิน</p>
                    <div>
                        <label for="slipUpload" class="block text-gray-700 text-sm font-bold mb-2">อัปโหลดสลิปโอนเงิน (ไม่บังคับ):</label>
                        <input type="file" id="slipUpload" accept="image/*" class="shadow appearance-none border rounded-lg w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                    </div>
                </div>

                <button type="submit" class="btn-primary w-full">ส่งคำสั่งซื้อ</button>
            </form>
        </div>
    </div>

    <!-- Order Confirmation Modal -->
    <div id="orderConfirmationModal" class="modal">
        <div class="modal-content">
            <span class="modal-close" id="closeOrderConfirmationModal">&times;</span>
            <h3 class="text-2xl font-bold mb-6 text-green-600">คำสั่งซื้อสำเร็จ!</h3>
            <p class="text-gray-700 mb-2">หมายเลขออเดอร์ของคุณ: <span id="orderNumberDisplay" class="font-semibold text-blue-600"></span></p>
            <p class="text-gray-700 mb-4">คิวจัดส่งของคุณ: <span id="deliveryQueueDisplay" class="font-semibold text-blue-600"></span></p>

            <h4 class="text-xl font-bold mb-4 text-gray-800">ใบเสร็จ</h4>
            <div id="receiptDisplay" class="border rounded-lg p-4 bg-gray-50 mb-6 max-h-60 overflow-y-auto">
                <!-- Receipt details will be displayed here -->
            </div>

            <p class="text-sm text-gray-500 mb-4">
                คำสั่งซื้อของคุณถูกส่งไปยังร้านค้าแล้ว ร้านค้าจะได้รับการแจ้งเตือนแบบเรียลไทม์ และจะติดต่อกลับไปเพื่อยืนยันคำสั่งซื้อ
            </p>
            <button id="newOrderBtn" class="btn-primary w-full">สั่งซื้อใหม่</button>
        </div>
    </div>

    <!-- Message Box for Alerts -->
    <div id="messageBox" class="message-box">
        <p id="messageText"></p>
        <button id="closeMessageBox">ตกลง</button>
    </div>

    <!-- Loading Overlay -->
    <div id="loadingOverlay" class="loading-overlay">
        <div class="spinner"></div>
    </div>

    <script type="module">
        // Import Firebase modules
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, onSnapshot, query, orderBy, serverTimestamp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Global Firebase variables
        let app;
        let db;
        let auth;
        let userId;
        let isAuthReady = false;

        // Message Box function
        function showMessageBox(message) {
            const messageBox = document.getElementById('messageBox');
            const messageText = document.getElementById('messageText');
            messageText.textContent = message;
            messageBox.style.display = 'block';
        }

        document.getElementById('closeMessageBox').addEventListener('click', () => {
            document.getElementById('messageBox').style.display = 'none';
        });

        // Loading Overlay functions
        function showLoading() {
            document.getElementById('loadingOverlay').style.display = 'flex';
        }

        function hideLoading() {
            document.getElementById('loadingOverlay').style.display = 'none';
        }

        // Initialize Firebase
        window.onload = async function() {
            showLoading();
            try {
                const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
                const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');

                if (Object.keys(firebaseConfig).length === 0) {
                    console.error("Firebase config is missing. Please provide __firebase_config.");
                    showMessageBox("เกิดข้อผิดพลาด: การตั้งค่า Firebase ไม่ถูกต้อง กรุณาลองใหม่ภายหลัง");
                    hideLoading();
                    return;
                }

                app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);

                // Sign in anonymously or with custom token
                if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                    await signInWithCustomToken(auth, __initial_auth_token);
                } else {
                    await signInAnonymously(auth);
                }

                onAuthStateChanged(auth, (user) => {
                    if (user) {
                        userId = user.uid;
                        isAuthReady = true;
                        console.log("Firebase authenticated. User ID:", userId);
                        // Start listening for orders once authenticated
                        listenForOrders();
                    } else {
                        userId = crypto.randomUUID(); // Fallback for unauthenticated or anonymous
                        isAuthReady = true;
                        console.log("Firebase anonymous sign-in. User ID:", userId);
                        listenForOrders(); // Still listen, but data access might be limited by rules
                    }
                    hideLoading();
                });

            } catch (error) {
                console.error("Error initializing Firebase or signing in:", error);
                showMessageBox("เกิดข้อผิดพลาดในการเชื่อมต่อระบบ กรุณาลองใหม่ภายหลัง");
                hideLoading();
            }
        };

        // --- Firebase Firestore Operations ---
        let ordersCollectionRef;
        let unsubscribeOrders;

        function listenForOrders() {
            if (!db || !userId || !isAuthReady) {
                console.warn("Firestore not ready for listening to orders.");
                return;
            }

            // Define Firestore collection paths based on security rules
            // For public data (shared with other users or collaborative apps)
            // ordersCollectionRef = collection(db, `artifacts/${appId}/public/data/orders`);
            // For private data (default)
            const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
            ordersCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/orders`);

            // Clean up previous listener if exists
            if (unsubscribeOrders) {
                unsubscribeOrders();
            }

            // Listen for real-time updates to orders
            // IMPORTANT: Avoid using orderBy() in Firestore queries, as it can lead to runtime errors due to index requirements.
            // Sort data in memory if needed.
            unsubscribeOrders = onSnapshot(ordersCollectionRef, (snapshot) => {
                const orders = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                console.log("Real-time orders update:", orders);
                // You can update a UI element here to show a list of past orders if needed
                // For this app, we primarily use it to confirm successful saving.
            }, (error) => {
                console.error("Error listening to orders:", error);
                showMessageBox("เกิดข้อผิดพลาดในการดึงข้อมูลคำสั่งซื้อ");
            });
        }

        async function saveOrderToFirestore(orderData) {
            if (!db || !userId || !isAuthReady) {
                console.error("Firestore is not initialized or authenticated.");
                showMessageBox("ระบบยังไม่พร้อมสำหรับการบันทึกคำสั่งซื้อ กรุณารอสักครู่แล้วลองใหม่");
                return false;
            }

            showLoading();
            try {
                const docRef = await addDoc(ordersCollectionRef, {
                    ...orderData,
                    userId: userId, // Store the user ID with the order
                    timestamp: serverTimestamp() // Add server timestamp
                });
                console.log("Order saved to Firestore with ID:", docRef.id);
                hideLoading();
                return true;
            } catch (e) {
                console.error("Error adding document: ", e);
                showMessageBox("เกิดข้อผิดพลาดในการบันทึกคำสั่งซื้อ กรุณาลองใหม่");
                hideLoading();
                return false;
            }
        }

        // --- Menu Data ---
        const menuData = {
            "เซตหมูจุ่ม": [
                { name: "เซตหมูจุ่มโบราณ", price: 159, type: "set", specials: [{ name: "วุ้นเส้น", price: 10 }, { name: "หมูนุ่ม", price: 20 }, { name: "หมูสามชั้น", price: 30 }, { name: "มาม่า", price: 10 }, { name: "ตับ", price: 20 }, { name: "ไข่", price: 10 }, { name: "ชุดผัก", price: 25 }, { name: "น้ำจิ้ม", price: 35 }, { name: "เต้าหู้ไข่", price: 10 }, { name: "เห็ดเข็มทอง", price: 15 }] },
                { name: "เซตสันคอเฉยๆ", price: 170, type: "set", specials: [{ name: "สันคอกัปตัน", price: 10 }, { name: "สันคอพรีเมียม", price: 10 }, { name: "วุ้นเส้น", price: 10 }, { name: "หมูนุ่ม", price: 20 }, { name: "หมูสามชั้น", price: 30 }, { name: "มาม่า", price: 10 }, { name: "ตับ", price: 20 }, { name: "ไข่", price: 10 }, { name: "ชุดผัก", price: 25 }, { name: "น้ำจิ้ม", price: 35 }, { name: "เต้าหู้ไข่", price: 10 }, { name: "เห็ดเข็มทอง", price: 15 }] },
                { name: "เซตสามชั้นเฉยๆ", price: 179, type: "set", choices: [{ name: "สามชั้น 3 แถว", price: 0 }, { name: "สามชั้นกลม รอบหนัง", price: 0 }, { name: "สามชั้นชาบู", price: 0 }], specials: [{ name: "วุ้นเส้น", price: 10 }, { name: "หมูนุ่ม", price: 20 }, { name: "หมูสามชั้น", price: 30 }, { name: "มาม่า", price: 10 }, { name: "ตับ", price: 20 }, { name: "ไข่", price: 10 }, { name: "ชุดผัก", price: 25 }, { name: "น้ำจิ้ม", price: 35 }, { name: "เต้าหู้ไข่", price: 10 }, { name: "เห็ดเข็มทอง", price: 15 }] }
            ],
            "หมู": [
                { name: "สามชั้นสไลด์ 500 กรัม", price: 149, type: "item" },
                { name: "สามชั้นกลม 500 กรัm", price: 149, type: "item" },
                { name: "สามชั้น 3 แถว 500 กรัม", price: 149, type: "item" },
                { name: "สันคอพรีเมียม 1 กิโลกรัม", price: 245, type: "item" },
                { name: "เบคอน 500 กรัม", price: 139, type: "item" },
                { name: "สันคอกัปตัน 500 กรัม", price: 145, type: "item" },
                { name: "หมูหมักนุ่ม 1 กิโลกรัม", price: 105, type: "item" },
                { name: "หมูหมักงา 1 กิโลกรัม", price: 105, type: "item" },
                { name: "หมูหมักพริกไทยดำ 1 กิโลกรัม", price: 105, type: "item" },
                { name: "สามชั้นหมักนุ่ม 1 กิโลกรัม", price: 189, type: "item" },
                { name: "ตับ 1 กิโลกรัม", price: 125, type: "item" },
                { name: "หมูบด 1 กิโลกรัม", price: 100, type: "item" },
                { name: "หมูหมักนุ่ม MPork", price: 119, type: "item" },
                { name: "หมูหมักงา MPork", price: 119, type: "item" },
                { name: "หมูหมักพริกไทยดำ MPork", price: 119, type: "item" }
            ],
            "เนื้อ": [
                { name: "เสือร้องไห้ออสเตเลีย 500 กรัม", price: 209, type: "item" },
                { name: "น่องลาย 200 กรัม", price: 99, type: "item" },
                { name: "เบคอนเนื้อ 200 กรัม", price: 99, type: "item" },
                { name: "เสือออส 200 กรัม", price: 99, type: "item" },
                { name: "ลิ้นสไลด์ 200 กรัม", price: 99, type: "item" }
            ],
            "ทะเล": [
                { name: "หมึกกรอบ 500 กรัม", price: 60, type: "item" },
                { name: "กุ้งเด้ง 40-50 ตัว", price: 159, type: "item" },
                { name: "ปลาหมึกบั้ง", price: 100, type: "item" },
                { name: "ปลาหมึกวง", price: 100, type: "item" },
                { name: "ปลาดอลลี่หั่น", price: 95, type: "item" },
                { name: "หอยแมลงภู่แกะ", price: 129, type: "item" },
                { name: "หอยแมลงภู่ติดฝา", price: 139, type: "item" }
            ],
            "อาหารแปรรูป": [
                { name: "มินิเปาทูโทนใส่ไข่กุ้ง", price: 25, type: "item" },
                { name: "มินิฟองเต้าหู้ชีส", price: 25, type: "item" },
                { name: "มินิชิกูว่า", price: 20, type: "item" },
                { name: "ปลาม้วนไข่เค็ม 500 กรัม", price: 99, type: "item" },
                { name: "เต้าหู้ชีส 500 กรัม", price: 95, type: "item" },
                { name: "คอมโบฟิตบัน", price: 99, type: "item" },
                { name: "เต้าหู้ปลา", price: 85, type: "item" },
                { name: "ซูซูฟิตบัน", price: 90, type: "item" },
                { name: "ลูกชิ้นหมูป้าปิ๋", price: 55, type: "item" },
                { name: "ลุกชิ้นเนื้อป้าปิ๋", price: 55, type: "item" },
                { name: "ทูโทนชิชะโมะ", price: 95, type: "item" },
                { name: "ปูอัดไส้ชีส", price: 85, type: "item" },
                { name: "ปูอัดเบนโตะ", price: 89, type: "item" },
                { name: "เปาทูโทนไส้ไข่กุ้ง", price: 95, type: "item" },
                { name: "ไข่หวาน", price: 65, type: "item" },
                { name: "ฟองเต้าหู้ชีส", price: 99, type: "item" },
                { name: "ฟองเต้าหู้ซีฟู้ด", price: 90, type: "item" },
                { name: "ลูกชิ้นปลานามิ", price: 45, type: "item" },
                { name: "มินิกุ้งแม็กนั่ม", price: 25, type: "item" },
                { name: "กุ้งแม้กนั่ม", price: 75, type: "item" }
            ]
        };

        let cart = []; // Array to store items in the cart: [{ item: productObject, quantity: number, selectedChoices: [], selectedSpecials: [] }]

        // --- DOM Elements ---
        const scanQrBtn = document.getElementById('scanQrBtn');
        const mainContent = document.getElementById('mainContent');
        const hamburgerMenu = document.getElementById('hamburgerMenu');
        const menuModal = document.getElementById('menuModal');
        const closeMenuModal = document.getElementById('closeMenuModal');
        const categoryList = document.getElementById('categoryList');
        const productListModal = document.getElementById('productListModal');
        const closeProductListModal = document.getElementById('closeProductListModal');
        const productListTitle = document.getElementById('productListTitle');
        const productsContainer = document.getElementById('productsContainer');
        const backToCategoriesBtn = document.getElementById('backToCategoriesBtn');
        const viewOrderBtn = document.getElementById('viewOrderBtn');
        const cartItemCount = document.getElementById('cartItemCount');
        const orderSummaryModal = document.getElementById('orderSummaryModal');
        const closeOrderSummaryModal = document.getElementById('closeOrderSummaryModal');
        const cartItemsDisplay = document.getElementById('cartItemsDisplay');
        const totalPriceDisplay = document.getElementById('totalPrice');
        const orderForm = document.getElementById('orderForm');
        const paymentTransferRadio = document.getElementById('paymentTransfer');
        const paymentCashRadio = document.getElementById('paymentCash');
        const transferDetails = document.getElementById('transferDetails');
        const orderConfirmationModal = document.getElementById('orderConfirmationModal');
        const closeOrderConfirmationModal = document.getElementById('closeOrderConfirmationModal');
        const orderNumberDisplay = document.getElementById('orderNumberDisplay');
        const deliveryQueueDisplay = document.getElementById('deliveryQueueDisplay');
        const receiptDisplay = document.getElementById('receiptDisplay');
        const newOrderBtn = document.getElementById('newOrderBtn');

        // --- Modal Control Functions ---
        function openModal(modalElement) {
            modalElement.classList.add('open');
        }

        function closeModal(modalElement) {
            modalElement.classList.remove('open');
        }

        // --- Event Listeners ---
        scanQrBtn.addEventListener('click', () => {
            // Simulate QR scan: show menu categories directly
            mainContent.classList.add('hidden'); // Hide initial content
            openModal(menuModal);
            renderCategories();
        });

        hamburgerMenu.addEventListener('click', () => {
            openModal(menuModal);
            renderCategories();
        });

        closeMenuModal.addEventListener('click', () => {
            closeModal(menuModal);
        });

        closeProductListModal.addEventListener('click', () => {
            closeModal(productListModal);
        });

        backToCategoriesBtn.addEventListener('click', () => {
            closeModal(productListModal);
            openModal(menuModal);
        });

        viewOrderBtn.addEventListener('click', () => {
            renderOrderSummary();
            openModal(orderSummaryModal);
        });

        closeOrderSummaryModal.addEventListener('click', () => {
            closeModal(orderSummaryModal);
        });

        paymentTransferRadio.addEventListener('change', () => {
            transferDetails.classList.remove('hidden');
        });

        paymentCashRadio.addEventListener('change', () => {
            transferDetails.classList.add('hidden');
        });

        closeOrderConfirmationModal.addEventListener('click', () => {
            closeModal(orderConfirmationModal);
            resetApp();
        });

        newOrderBtn.addEventListener('click', () => {
            closeModal(orderConfirmationModal);
            resetApp();
        });

        // --- Render Functions ---
        function renderCategories() {
            categoryList.innerHTML = '';
            for (const category in menuData) {
                const li = document.createElement('li');
                li.className = 'text-lg font-medium cursor-pointer rounded-lg hover:bg-gray-100 p-3 mb-2 transition-colors';
                li.textContent = category;
                li.addEventListener('click', () => {
                    renderProducts(category);
                    closeModal(menuModal);
                    openModal(productListModal);
                });
                categoryList.appendChild(li);
            }
        }

        function renderProducts(category) {
            productListTitle.textContent = category;
            productsContainer.innerHTML = '';
            const products = menuData[category];

            products.forEach(product => {
                const productCard = document.createElement('div');
                productCard.className = 'product-card';

                let specialOptionsHtml = '';
                if (product.type === 'set' && product.specials && product.specials.length > 0) {
                    specialOptionsHtml += `<div class="mt-3 text-sm text-gray-600">
                        <p class="font-semibold mb-1">พิเศษ:</p>
                        <div class="grid grid-cols-2 gap-2">`;
                    product.specials.forEach(special => {
                        specialOptionsHtml += `
                            <label class="flex items-center">
                                <input type="checkbox" data-special-name="${special.name}" data-special-price="${special.price}" class="special-checkbox mr-2 rounded text-green-500 focus:ring-green-500">
                                ${special.name} (+${special.price}฿)
                            </label>`;
                    });
                    specialOptionsHtml += `</div></div>`;
                }

                let choiceOptionsHtml = '';
                if (product.type === 'set' && product.choices && product.choices.length > 0) {
                    choiceOptionsHtml += `<div class="mt-3 text-sm text-gray-600">
                        <p class="font-semibold mb-1">เลือก 1 อย่าง:</p>
                        <div class="space-y-1">`;
                    product.choices.forEach((choice, index) => {
                        choiceOptionsHtml += `
                            <label class="flex items-center">
                                <input type="radio" name="choice-${product.name.replace(/\s/g, '-')}" data-choice-name="${choice.name}" data-choice-price="${choice.price}" class="choice-radio mr-2 rounded text-blue-500 focus:ring-blue-500" ${index === 0 ? 'checked' : ''}>
                                ${choice.name}
                            </label>`;
                    });
                    choiceOptionsHtml += `</div></div>`;
                }

                productCard.innerHTML = `
                    <div class="product-card-header">
                        <h4 class="text-lg font-semibold">${product.name}</h4>
                        <span class="text-xl font-bold text-green-600">${product.price}฿</span>
                    </div>
                    ${choiceOptionsHtml}
                    ${specialOptionsHtml}
                    <div class="flex items-center justify-end mt-4">
                        <div class="quantity-control mr-4">
                            <button class="quantity-btn decrease-quantity" data-product-name="${product.name}">-</button>
                            <input type="number" value="1" min="1" class="quantity-input" data-product-name="${product.name}">
                            <button class="quantity-btn increase-quantity" data-product-name="${product.name}">+</button>
                        </div>
                        <button class="add-to-cart-btn" data-product-name="${product.name}">เพิ่ม</button>
                    </div>
                `;
                productsContainer.appendChild(productCard);
            });

            // Add event listeners for quantity controls and add to cart buttons
            productsContainer.querySelectorAll('.increase-quantity').forEach(button => {
                button.addEventListener('click', (e) => {
                    const input = e.target.previousElementSibling;
                    input.value = parseInt(input.value) + 1;
                });
            });

            productsContainer.querySelectorAll('.decrease-quantity').forEach(button => {
                button.addEventListener('click', (e) => {
                    const input = e.target.nextElementSibling;
                    if (parseInt(input.value) > 1) {
                        input.value = parseInt(input.value) - 1;
                    }
                });
            });

            productsContainer.querySelectorAll('.add-to-cart-btn').forEach(button => {
                button.addEventListener('click', (e) => {
                    const productName = e.target.dataset.productName;
                    const product = products.find(p => p.name === productName);
                    const quantityInput = e.target.previousElementSibling.querySelector('.quantity-input');
                    const quantity = parseInt(quantityInput.value);

                    let selectedChoices = [];
                    if (product.type === 'set' && product.choices) {
                        const selectedChoiceRadio = productCard.querySelector(`input[name="choice-${product.name.replace(/\s/g, '-')}"].choice-radio:checked`);
                        if (selectedChoiceRadio) {
                            selectedChoices.push({
                                name: selectedChoiceRadio.dataset.choiceName,
                                price: parseFloat(selectedChoiceRadio.dataset.choicePrice)
                            });
                        }
                    }

                    let selectedSpecials = [];
                    if (product.type === 'set' && product.specials) {
                        productCard.querySelectorAll('.special-checkbox:checked').forEach(checkbox => {
                            selectedSpecials.push({
                                name: checkbox.dataset.specialName,
                                price: parseFloat(checkbox.dataset.specialPrice)
                            });
                        });
                    }
                    addToCart(product, quantity, selectedChoices, selectedSpecials);
                });
            });
        }

        function addToCart(product, quantity, selectedChoices = [], selectedSpecials = []) {
            let itemPrice = product.price;
            let itemDescription = product.name;

            if (product.type === 'set') {
                if (selectedChoices.length > 0) {
                    itemDescription += ` (${selectedChoices.map(c => c.name).join(', ')})`;
                    itemPrice += selectedChoices.reduce((sum, c) => sum + c.price, 0);
                }
                if (selectedSpecials.length > 0) {
                    itemDescription += ` + พิเศษ: ${selectedSpecials.map(s => s.name).join(', ')}`;
                    itemPrice += selectedSpecials.reduce((sum, s) => sum + s.price, 0);
                }
            }

            const existingItemIndex = cart.findIndex(cartItem =>
                cartItem.item.name === product.name &&
                JSON.stringify(cartItem.selectedChoices) === JSON.stringify(selectedChoices) &&
                JSON.stringify(cartItem.selectedSpecials) === JSON.stringify(selectedSpecials)
            );

            if (existingItemIndex > -1) {
                cart[existingItemIndex].quantity += quantity;
            } else {
                cart.push({
                    item: product,
                    quantity: quantity,
                    selectedChoices: selectedChoices,
                    selectedSpecials: selectedSpecials,
                    displayPrice: itemPrice, // Store calculated price for display
                    displayDescription: itemDescription // Store full description for display
                });
            }
            updateCartCount();
            showMessageBox(`${product.name} เพิ่มลงตะกร้าแล้ว ${quantity} ชิ้น!`);
        }

        function updateCartCount() {
            const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
            cartItemCount.textContent = totalItems;
        }

        function renderOrderSummary() {
            cartItemsDisplay.innerHTML = '';
            let total = 0;

            if (cart.length === 0) {
                cartItemsDisplay.innerHTML = '<p class="text-gray-500 text-center">ยังไม่มีสินค้าในตะกร้า</p>';
                totalPriceDisplay.textContent = '0.00';
                orderForm.querySelector('button[type="submit"]').disabled = true;
                return;
            } else {
                 orderForm.querySelector('button[type="submit"]').disabled = false;
            }

            cart.forEach((cartItem, index) => {
                const itemTotal = cartItem.displayPrice * cartItem.quantity;
                total += itemTotal;

                const div = document.createElement('div');
                div.className = 'cart-item';
                div.innerHTML = `
                    <div class="flex-1">
                        <p class="font-medium">${cartItem.displayDescription}</p>
                        <p class="text-sm text-gray-600">${cartItem.displayPrice}฿ x ${cartItem.quantity}</p>
                    </div>
                    <div class="flex items-center gap-2">
                        <button class="quantity-btn decrease-cart-item" data-index="${index}">-</button>
                        <span class="font-bold">${cartItem.quantity}</span>
                        <button class="quantity-btn increase-cart-item" data-index="${index}">+</button>
                        <button class="text-red-500 hover:text-red-700 ml-2" data-index="${index}">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                        </button>
                    </div>
                `;
                cartItemsDisplay.appendChild(div);
            });

            totalPriceDisplay.textContent = total.toFixed(2);

            // Add event listeners for cart item quantity and remove buttons
            cartItemsDisplay.querySelectorAll('.increase-cart-item').forEach(button => {
                button.addEventListener('click', (e) => {
                    const index = parseInt(e.target.dataset.index);
                    cart[index].quantity++;
                    renderOrderSummary();
                    updateCartCount();
                });
            });

            cartItemsDisplay.querySelectorAll('.decrease-cart-item').forEach(button => {
                button.addEventListener('click', (e) => {
                    const index = parseInt(e.target.dataset.index);
                    if (cart[index].quantity > 1) {
                        cart[index].quantity--;
                    } else {
                        cart.splice(index, 1); // Remove item if quantity goes to 0
                    }
                    renderOrderSummary();
                    updateCartCount();
                });
            });

            cartItemsDisplay.querySelectorAll('.text-red-500').forEach(button => {
                button.addEventListener('click', (e) => {
                    const index = parseInt(e.target.closest('button').dataset.index);
                    cart.splice(index, 1);
                    renderOrderSummary();
                    updateCartCount();
                });
            });
        }

        // --- Order Submission ---
        orderForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            if (cart.length === 0) {
                showMessageBox("กรุณาเพิ่มสินค้าลงในตะกร้าก่อนส่งคำสั่งซื้อ");
                return;
            }

            const customerName = document.getElementById('customerName').value;
            const customerPhone = document.getElementById('customerPhone').value;
            const customerAddress = document.getElementById('customerAddress').value;
            const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
            const slipUpload = document.getElementById('slipUpload').files[0]; // Get the file object

            // Create a simplified order items array for storage
            const orderItemsForStorage = cart.map(item => ({
                name: item.item.name,
                quantity: item.quantity,
                basePrice: item.item.price,
                displayPrice: item.displayPrice,
                displayDescription: item.displayDescription,
                selectedChoices: item.selectedChoices,
                selectedSpecials: item.selectedSpecials
            }));

            const orderData = {
                customerName,
                customerPhone,
                customerAddress,
                items: orderItemsForStorage,
                totalPrice: parseFloat(totalPriceDisplay.textContent),
                paymentMethod,
                slipUploaded: slipUpload ? true : false, // Only store if slip was uploaded
                status: "Pending"
            };

            const saved = await saveOrderToFirestore(orderData);

            if (saved) {
                // Generate a simple order number and queue number
                const orderNumber = 'ORD-' + Math.random().toString(36).substr(2, 9).toUpperCase();
                const deliveryQueue = Math.floor(Math.random() * 10) + 1; // Random queue 1-10

                orderNumberDisplay.textContent = orderNumber;
                deliveryQueueDisplay.textContent = deliveryQueue;

                // Render receipt
                let receiptHtml = `<p class="font-bold mb-2">ชื่อผู้รับ: ${customerName}</p>`;
                receiptHtml += `<p class="font-bold mb-2">เบอร์โทร: ${customerPhone}</p>`;
                receiptHtml += `<p class="font-bold mb-2">ที่อยู่: ${customerAddress}</p>`;
                receiptHtml += `<p class="font-bold mb-2">วิธีการชำระเงิน: ${paymentMethod === 'transfer' ? 'โอนเงิน' : 'เงินสด'}</p>`;
                receiptHtml += `<div class="border-t border-b py-2 my-2">`;
                cart.forEach(item => {
                    receiptHtml += `<p>${item.displayDescription} x ${item.quantity} = ${(item.displayPrice * item.quantity).toFixed(2)}฿</p>`;
                });
                receiptHtml += `</div>`;
                receiptHtml += `<p class="text-lg font-bold mt-2">รวมทั้งหมด: ${totalPriceDisplay.textContent}฿</p>`;
                receiptDisplay.innerHTML = receiptHtml;

                closeModal(orderSummaryModal);
                openModal(orderConfirmationModal);
            }
        });

        function resetApp() {
            cart = [];
            updateCartCount();
            document.getElementById('customerName').value = '';
            document.getElementById('customerPhone').value = '';
            document.getElementById('customerAddress').value = '';
            paymentTransferRadio.checked = true;
            transferDetails.classList.remove('hidden');
            document.getElementById('slipUpload').value = ''; // Clear file input
            mainContent.classList.remove('hidden'); // Show initial content again
        }
    </script>
</body>
</html>
